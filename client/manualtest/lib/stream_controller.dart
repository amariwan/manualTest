import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:web_socket_channel/web_socket_channel.dart';

import 'json.dart';

class WebSocketController {
  final String url;
  late WebSocketChannel channel;
  late StreamController<dynamic> _streamController;
  late StreamSubscription _subscription;
  WebSocketController(this.url) {
    channel = WebSocketChannel.connect(Uri.parse(url));
    _streamController = StreamController.broadcast();
    _subscription = channel.stream.listen((message) {
      _streamController.add(message);
    }, onDone: () {
      _streamController.close();
    }, onError: (error) {
      _streamController.addError(error);
    });
  }

  Stream get stream => _streamController.stream;

  void sendMessage(String message) {
    channel.sink.add(message);
  }

  void dispose() {
    _streamController.close();
    _subscription.cancel();
    channel.sink.close();
  }

  void sendEmail(String id, String tester, String description) {
    Order autogenerated = Order(
        event: "sendEmail",
        testComplete: true,
        callbackUrl: '',
        createdAt: '',
        creator: Tester(email: '', name: ''),
        description: description,
        expireDate: '',
        id: id,
        mail: Mail(body: '', subject: ''),
        tasks: [],
        testers: [Tester(email: tester, name: "")],
        updatedAt: '',
        stump: Signature(
            index: Get.find<Index>().index,
            createdAt: TimeOfDay.now().toString()));
    sendMessage(json.encode(autogenerated.toJson()));
  }

  void getValues() {
    Order autogenerated = Order(
        event: "getValues",
        testComplete: true,
        callbackUrl: '',
        createdAt: '',
        creator: Tester(email: '', name: ''),
        description: '',
        expireDate: '',
        id: '',
        mail: Mail(body: '', subject: ''),
        tasks: [],
        testers: [],
        updatedAt: '',
        stump: Signature(
            index: Get.find<Index>().index,
            createdAt: TimeOfDay.now().toString()));

    sendMessage(json.encode(autogenerated.toJson()));
  }

  void deleteValues(String id) {
    Order autogenerated = Order(
        event: "delete",
        testComplete: true,
        callbackUrl: '',
        createdAt: '',
        creator: Tester(email: '', name: ''),
        description: '',
        expireDate: '',
        id: id,
        mail: Mail(body: '', subject: ''),
        tasks: [],
        testers: [],
        updatedAt: '',
        stump: Signature(
            index: Get.find<Index>().index,
            createdAt: TimeOfDay.now().toString()));
    sendMessage(json.encode(autogenerated.toJson()));
  }
}

class Index {
  int index = 0;
  Index(this.index);
  void increment() {
    index++;
  }
}
